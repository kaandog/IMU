   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 329               	.global	Task_Accelorometer
 331               	Task_Accelorometer:
 332               		.stabd	46,0,0
   1:main.c        **** /******************************************************************************
   2:main.c        **** *  Nano-RK, a real-time operating system for sensor networks.
   3:main.c        **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:main.c        **** *  All rights reserved.
   5:main.c        **** *
   6:main.c        **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:main.c        **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:main.c        **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:main.c        **** *
  10:main.c        **** *  This program is free software: you can redistribute it and/or modify
  11:main.c        **** *  it under the terms of the GNU General Public License as published by
  12:main.c        **** *  the Free Software Foundation, version 2.0 of the License.
  13:main.c        **** *
  14:main.c        **** *  This program is distributed in the hope that it will be useful,
  15:main.c        **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:main.c        **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:main.c        **** *  GNU General Public License for more details.
  18:main.c        **** *
  19:main.c        **** *  You should have received a copy of the GNU General Public License
  20:main.c        **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:main.c        **** *
  22:main.c        **** *******************************************************************************/
  23:main.c        **** 
  24:main.c        **** #include <nrk.h>
  25:main.c        **** #include <include.h>
  26:main.c        **** #include <ulib.h>
  27:main.c        **** #include <stdio.h>
  28:main.c        **** #include <hal.h>
  29:main.c        **** #include <nrk_error.h>
  30:main.c        **** #include <nrk_timer.h>
  31:main.c        **** #include <nrk_stack_check.h>
  32:main.c        **** #include <nrk_stats.h>
  33:main.c        **** #include <TWI_Master.h>
  34:main.c        **** 
  35:main.c        **** 
  36:main.c        **** 
  37:main.c        **** #define TWI_GEN_CALL         0x00  // The General Call address is 0
  38:main.c        **** 
  39:main.c        **** // Sample TWI transmission commands
  40:main.c        **** #define TWI_CMD_MASTER_WRITE 0x10
  41:main.c        **** #define TWI_CMD_MASTER_READ  0x20
  42:main.c        **** 
  43:main.c        **** // Sample TWI transmission states, used in the main application.
  44:main.c        **** #define SEND_DATA             0x01
  45:main.c        **** #define REQUEST_DATA          0x02
  46:main.c        **** #define READ_DATA_FROM_BUFFER 0x03
  47:main.c        **** 
  48:main.c        **** 
  49:main.c        **** // Constants for the accelrometer
  50:main.c        **** //There are 6 data registers, they are sequential starting 
  51:main.c        **** //with the LSB of X.  We'll read all 6 in a burst and won't
  52:main.c        **** //address them individually
  53:main.c        **** #define ADXL345_REGISTER_XLSB (0x32)
  54:main.c        **** 
  55:main.c        **** //Need to set power control bit to wake up the adxl345
  56:main.c        **** #define ADXL_REGISTER_PWRCTL (0x2D)
  57:main.c        **** #define ADXL_PWRCTL_MEASURE (1 << 3)
  58:main.c        **** #define  ADXL345_ADDRESS (0xA6)
  59:main.c        **** 
  60:main.c        **** unsigned char TWI_Act_On_Failure_In_Last_Transmission ( unsigned char TWIerrorMsg )
  61:main.c        **** {
  62:main.c        ****                     // A failure has occurred, use TWIerrorMsg to determine the nature of the failu
  63:main.c        ****                     // and take appropriate actions.
  64:main.c        ****                     // Se header file for a list of possible failures messages.
  65:main.c        ****                     
  66:main.c        ****                     // Here is a simple sample, where if received a NACK on the slave address,
  67:main.c        ****                     // then a retransmission will be initiated.
  68:main.c        **** if ( (TWIerrorMsg == TWI_MTX_ADR_NACK) | (TWIerrorMsg == TWI_MRX_ADR_NACK) ){
  69:main.c        ****     TWI_Start_Transceiver();
  70:main.c        **** }
  71:main.c        **** printf("%c \n",TWIerrorMsg);
  72:main.c        ****     
  73:main.c        ****   return TWIerrorMsg; 
  74:main.c        **** }
  75:main.c        **** 
  76:main.c        **** 
  77:main.c        **** 
  78:main.c        **** 
  79:main.c        **** NRK_STK Stack1[NRK_APP_STACKSIZE];
  80:main.c        **** nrk_task_type TaskOne;
  81:main.c        **** void Task1(void);
  82:main.c        **** 
  83:main.c        **** void init_adxl345(void);
  84:main.c        **** 
  85:main.c        **** 
  86:main.c        **** void nrk_create_taskset();
  87:main.c        **** 
  88:main.c        **** int
  89:main.c        **** main ()
  90:main.c        **** {
  91:main.c        ****   nrk_setup_ports();
  92:main.c        ****   nrk_setup_uart(UART_BAUDRATE_115K2);
  93:main.c        **** 
  94:main.c        ****   TWI_Master_Initialise();
  95:main.c        ****   sei();
  96:main.c        ****   init_adxl345();
  97:main.c        ****   nrk_init();
  98:main.c        **** 
  99:main.c        ****   nrk_led_clr(ORANGE_LED);
 100:main.c        ****   nrk_led_clr(BLUE_LED);
 101:main.c        ****   nrk_led_clr(GREEN_LED);
 102:main.c        ****   nrk_led_clr(RED_LED);
 103:main.c        ****  
 104:main.c        ****   nrk_time_set(0,0);
 105:main.c        ****   nrk_create_taskset ();
 106:main.c        ****   nrk_start();
 107:main.c        ****   
 108:main.c        ****   return 0;
 109:main.c        **** }
 110:main.c        **** 
 111:main.c        **** uint8_t messageBuf[16];
 112:main.c        **** unsigned int read = 0;
 113:main.c        **** void init_adxl345() {
 114:main.c        ****   while(!read){
 115:main.c        ****   messageBuf[0] = (ADXL345_ADDRESS<<TWI_ADR_BITS) | (FALSE<<TWI_READ_BIT);
 116:main.c        ****   messageBuf[1] = ADXL_REGISTER_PWRCTL;
 117:main.c        ****   messageBuf[2] = ADXL_PWRCTL_MEASURE;
 118:main.c        ****   TWI_Start_Transceiver_With_Data(messageBuf, 3);
 119:main.c        ****   //Check to see if it worked!
 120:main.c        ****   messageBuf[0] = ADXL345_ADDRESS | TRUE<<TWI_READ_BIT;
 121:main.c        ****   messageBuf[1] = ADXL_REGISTER_PWRCTL;
 122:main.c        ****   TWI_Start_Transceiver_With_Data(messageBuf, 2);
 123:main.c        ****   messageBuf[0] = 0;
 124:main.c        ****   messageBuf[1] = 0;
 125:main.c        ****   messageBuf[2] = 0;
 126:main.c        ****   read = TWI_Get_Data_From_Transceiver(messageBuf, 3);
 127:main.c        ****   }
 128:main.c        ****   // printf("sent: %x \n",(unsigned int)TWI_Get_Data_From_Transceiver(messageBuf, 3));
 129:main.c        ****   printf("sent!\r\n");
 130:main.c        ****   printf("ctrl register: %x \r\n",(unsigned int) messageBuf[2]);
 131:main.c        ****   printf("}\n");
 132:main.c        **** }
 133:main.c        **** 
 134:main.c        **** 
 135:main.c        **** void Task_Accelorometer()
 136:main.c        **** {
 334               	.LM0:
 335               	.LFBB1:
 336               	/* prologue: function */
 337               	/* frame size = 0 */
 338               	/* stack size = 0 */
 339               	.L__stack_usage = 0
 340               	.L2:
 137:main.c        **** // while(1){nrk_wait_until_next_period();}
 138:main.c        **** while(1){
 139:main.c        ****   //read 6 bytes from the ADXL345
 140:main.c        ****   // messageBuf[0] = (ADXL345_ADDRESS<<TWI_ADR_BITS) | (FALSE<<TWI_READ_BIT);
 141:main.c        ****   // messageBuf[1] = ADXL345_REGISTER_XLSB;
 142:main.c        ****   // TWI_Start_Transceiver_With_Data(messageBuf, 3);
 143:main.c        ****   // messageBuf[0] = 0;
 144:main.c        ****   // messageBuf[1] = 0;
 145:main.c        ****   // printf("sent: %x \r\n",(unsigned int)TWI_Get_Data_From_Transceiver(messageBuf, 1));
 146:main.c        **** 
 147:main.c        ****   // messageBuf[0] = ((ADXL345_ADDRESS<<TWI_ADR_BITS) | (FALSE<<TWI_READ_BIT));
 148:main.c        ****   // messageBuf[1] = ADXL345_REGISTER_XLSB;
 149:main.c        ****   // TWI_Start_Transceiver_With_Data(messageBuf, 2);
 150:main.c        **** 
 151:main.c        ****   // /* Read low byte */
 152:main.c        ****   // messageBuf[0] = (ADXL345_ADDRESS<<TWI_ADR_BITS) |
 153:main.c        ****   //                 (TRUE<<TWI_READ_BIT);
 154:main.c        ****   // TWI_Start_Transceiver_With_Data(messageBuf, 2);
 155:main.c        ****   // TWI_Get_Data_From_Transceiver(messageBuf, 2);
 156:main.c        ****   // // uint16_t pixel_l = messageBuf[1];
 157:main.c        ****   // printf("block1 : %x \r\n",messageBuf[1]);
 158:main.c        ****   nrk_wait_until_next_period();
 342               	.LM1:
 343 0000 0E94 0000 		call nrk_wait_until_next_period
 159:main.c        **** }
 345               	.LM2:
 346 0004 00C0      		rjmp .L2
 348               	.Lscope1:
 350               		.stabd	78,0,0
 351               		.section	.rodata.str1.1,"aMS",@progbits,1
 352               	.LC0:
 353 0000 2563 200A 		.string	"%c \n"
 353      00
 354               		.text
 357               	.global	TWI_Act_On_Failure_In_Last_Transmission
 359               	TWI_Act_On_Failure_In_Last_Transmission:
 360               		.stabd	46,0,0
  61:main.c        ****                     // A failure has occurred, use TWIerrorMsg to determine the nature of the failu
 362               	.LM3:
 363               	.LFBB2:
 364 0006 CF93      		push r28
 365               	/* prologue: function */
 366               	/* frame size = 0 */
 367               	/* stack size = 1 */
 368               	.L__stack_usage = 1
 369 0008 C82F      		mov r28,r24
  68:main.c        ****     TWI_Start_Transceiver();
 371               	.LM4:
 372 000a 8834      		cpi r24,lo8(72)
 373 000c 01F0      		breq .L8
 374 000e 8032      		cpi r24,lo8(32)
 375 0010 01F4      		brne .L4
 376               	.L8:
  69:main.c        **** }
 378               	.LM5:
 379 0012 0E94 0000 		call TWI_Start_Transceiver
 380               	.L4:
  71:main.c        ****     
 382               	.LM6:
 383 0016 1F92      		push __zero_reg__
 384 0018 CF93      		push r28
 385 001a 80E0      		ldi r24,lo8(.LC0)
 386 001c 90E0      		ldi r25,hi8(.LC0)
 387 001e 9F93      		push r25
 388 0020 8F93      		push r24
 389 0022 0E94 0000 		call printf
  73:main.c        **** }
 391               	.LM7:
 392 0026 0F90      		pop __tmp_reg__
 393 0028 0F90      		pop __tmp_reg__
 394 002a 0F90      		pop __tmp_reg__
 395 002c 0F90      		pop __tmp_reg__
  74:main.c        **** 
 397               	.LM8:
 398 002e 8C2F      		mov r24,r28
 399               	/* epilogue start */
 400 0030 CF91      		pop r28
 401 0032 0895      		ret
 403               	.Lscope2:
 405               		.stabd	78,0,0
 406               		.section	.rodata.str1.1
 407               	.LC1:
 408 0005 7365 6E74 		.string	"sent!\r"
 408      210D 00
 409               	.LC2:
 410 000c 6374 726C 		.string	"ctrl register: %x \r\n"
 410      2072 6567 
 410      6973 7465 
 410      723A 2025 
 410      7820 0D0A 
 411               	.LC3:
 412 0021 7D00      		.string	"}"
 413               		.text
 415               	.global	init_adxl345
 417               	init_adxl345:
 418               		.stabd	46,0,0
 113:main.c        ****   while(!read){
 420               	.LM9:
 421               	.LFBB3:
 422 0034 0F93      		push r16
 423 0036 1F93      		push r17
 424 0038 CF93      		push r28
 425 003a DF93      		push r29
 426               	/* prologue: function */
 427               	/* frame size = 0 */
 428               	/* stack size = 4 */
 429               	.L__stack_usage = 4
 115:main.c        ****   messageBuf[1] = ADXL_REGISTER_PWRCTL;
 431               	.LM10:
 432 003c DCE4      		ldi r29,lo8(76)
 116:main.c        ****   messageBuf[2] = ADXL_PWRCTL_MEASURE;
 434               	.LM11:
 435 003e CDE2      		ldi r28,lo8(45)
 117:main.c        ****   TWI_Start_Transceiver_With_Data(messageBuf, 3);
 437               	.LM12:
 438 0040 18E0      		ldi r17,lo8(8)
 120:main.c        ****   messageBuf[1] = ADXL_REGISTER_PWRCTL;
 440               	.LM13:
 441 0042 07EA      		ldi r16,lo8(-89)
 442               	.L18:
 114:main.c        ****   messageBuf[0] = (ADXL345_ADDRESS<<TWI_ADR_BITS) | (FALSE<<TWI_READ_BIT);
 444               	.LM14:
 445 0044 8091 0000 		lds r24,read
 446 0048 9091 0000 		lds r25,read+1
 447 004c 892B      		or r24,r25
 448 004e 01F4      		brne .L20
 115:main.c        ****   messageBuf[1] = ADXL_REGISTER_PWRCTL;
 450               	.LM15:
 451 0050 D093 0000 		sts messageBuf,r29
 116:main.c        ****   messageBuf[2] = ADXL_PWRCTL_MEASURE;
 453               	.LM16:
 454 0054 C093 0000 		sts messageBuf+1,r28
 117:main.c        ****   TWI_Start_Transceiver_With_Data(messageBuf, 3);
 456               	.LM17:
 457 0058 1093 0000 		sts messageBuf+2,r17
 118:main.c        ****   //Check to see if it worked!
 459               	.LM18:
 460 005c 63E0      		ldi r22,lo8(3)
 461 005e 80E0      		ldi r24,lo8(messageBuf)
 462 0060 90E0      		ldi r25,hi8(messageBuf)
 463 0062 0E94 0000 		call TWI_Start_Transceiver_With_Data
 120:main.c        ****   messageBuf[1] = ADXL_REGISTER_PWRCTL;
 465               	.LM19:
 466 0066 0093 0000 		sts messageBuf,r16
 121:main.c        ****   TWI_Start_Transceiver_With_Data(messageBuf, 2);
 468               	.LM20:
 469 006a C093 0000 		sts messageBuf+1,r28
 122:main.c        ****   messageBuf[0] = 0;
 471               	.LM21:
 472 006e 62E0      		ldi r22,lo8(2)
 473 0070 80E0      		ldi r24,lo8(messageBuf)
 474 0072 90E0      		ldi r25,hi8(messageBuf)
 475 0074 0E94 0000 		call TWI_Start_Transceiver_With_Data
 123:main.c        ****   messageBuf[1] = 0;
 477               	.LM22:
 478 0078 1092 0000 		sts messageBuf,__zero_reg__
 124:main.c        ****   messageBuf[2] = 0;
 480               	.LM23:
 481 007c 1092 0000 		sts messageBuf+1,__zero_reg__
 125:main.c        ****   read = TWI_Get_Data_From_Transceiver(messageBuf, 3);
 483               	.LM24:
 484 0080 1092 0000 		sts messageBuf+2,__zero_reg__
 126:main.c        ****   }
 486               	.LM25:
 487 0084 63E0      		ldi r22,lo8(3)
 488 0086 80E0      		ldi r24,lo8(messageBuf)
 489 0088 90E0      		ldi r25,hi8(messageBuf)
 490 008a 0E94 0000 		call TWI_Get_Data_From_Transceiver
 491 008e 90E0      		ldi r25,0
 492 0090 9093 0000 		sts read+1,r25
 493 0094 8093 0000 		sts read,r24
 494 0098 00C0      		rjmp .L18
 495               	.L20:
 129:main.c        ****   printf("ctrl register: %x \r\n",(unsigned int) messageBuf[2]);
 497               	.LM26:
 498 009a 80E0      		ldi r24,lo8(.LC1)
 499 009c 90E0      		ldi r25,hi8(.LC1)
 500 009e 0E94 0000 		call puts
 130:main.c        ****   printf("}\n");
 502               	.LM27:
 503 00a2 8091 0000 		lds r24,messageBuf+2
 504 00a6 1F92      		push __zero_reg__
 505 00a8 8F93      		push r24
 506 00aa 80E0      		ldi r24,lo8(.LC2)
 507 00ac 90E0      		ldi r25,hi8(.LC2)
 508 00ae 9F93      		push r25
 509 00b0 8F93      		push r24
 510 00b2 0E94 0000 		call printf
 131:main.c        **** }
 512               	.LM28:
 513 00b6 0F90      		pop __tmp_reg__
 514 00b8 0F90      		pop __tmp_reg__
 515 00ba 0F90      		pop __tmp_reg__
 516 00bc 0F90      		pop __tmp_reg__
 517 00be 80E0      		ldi r24,lo8(.LC3)
 518 00c0 90E0      		ldi r25,hi8(.LC3)
 519               	/* epilogue start */
 132:main.c        **** 
 521               	.LM29:
 522 00c2 DF91      		pop r29
 523 00c4 CF91      		pop r28
 524 00c6 1F91      		pop r17
 525 00c8 0F91      		pop r16
 131:main.c        **** }
 527               	.LM30:
 528 00ca 0C94 0000 		jmp puts
 530               	.Lscope3:
 532               		.stabd	78,0,0
 534               	.global	nrk_create_taskset
 536               	nrk_create_taskset:
 537               		.stabd	46,0,0
 160:main.c        ****   // while (1) {
 161:main.c        ****   //     pixel_addr_l=0x80;
 162:main.c        ****   //     pixel_addr_h=0x81;
 163:main.c        **** 
 164:main.c        ****   //     int row, col, status;
 165:main.c        ****   //     for (row = 0; row < 8; row++) {
 166:main.c        ****   //         for (col = 0; col < 8; col++) {
 167:main.c        ****   //             /* Request low byte */
 168:main.c        ****   //             messageBuf[0] = (ADXL345_ADDRESS<<TWI_ADR_BITS) | (FALSE<<TWI_READ_BIT);
 169:main.c        ****   //             messageBuf[1] = ADXL_REGISTER_PWRCTL;
 170:main.c        ****   //             TWI_Start_Transceiver_With_Data(messageBuf, 2);
 171:main.c        **** 
 172:main.c        ****   //             /* Read low byte */
 173:main.c        ****               // messageBuf[0] = (grideye_addr<<TWI_ADR_BITS) |
 174:main.c        ****               //     (TRUE<<TWI_READ_BIT);
 175:main.c        ****               // TWI_Start_Transceiver_With_Data(messageBuf, 2);
 176:main.c        ****               // TWI_Get_Data_From_Transceiver(messageBuf, 2);
 177:main.c        ****   //             uint16_t pixel_l = messageBuf[1];
 178:main.c        **** 
 179:main.c        ****   //             /* Request high byte */
 180:main.c        ****   //             messageBuf[0] = (grideye_addr<<TWI_ADR_BITS) |
 181:main.c        ****   //                 (FALSE<<TWI_READ_BIT);
 182:main.c        ****   //             messageBuf[1] = pixel_addr_h;
 183:main.c        ****   //             TWI_Start_Transceiver_With_Data(messageBuf, 2);
 184:main.c        **** 
 185:main.c        ****   //             /* Read high byte */
 186:main.c        ****   //             messageBuf[0] = (grideye_addr<<TWI_ADR_BITS) |
 187:main.c        ****   //                 (TRUE<<TWI_READ_BIT);
 188:main.c        ****   //             TWI_Start_Transceiver_With_Data(messageBuf, 2);
 189:main.c        ****   //             TWI_Get_Data_From_Transceiver(messageBuf, 2);
 190:main.c        ****   //             uint16_t pixel_h = messageBuf[1];
 191:main.c        **** 
 192:main.c        ****   //             /* Store pixel and advance */
 193:main.c        ****   //             raw_therm[row][col] = (pixel_h << 8) | pixel_l;
 194:main.c        ****   //             pixel_addr_l += 2;
 195:main.c        ****   //             pixel_addr_h += 2;
 196:main.c        ****   //         }
 197:main.c        ****   //         int n = sprintf(printbuf, "$ADXL345:,%d,%04X,%04X,%04X,%04X,%04X,%04X,%04X,%04X*",
 198:main.c        ****   //                 row,
 199:main.c        ****   //                 raw_therm[row][0], raw_therm[row][1],
 200:main.c        ****   //                 raw_therm[row][2], raw_therm[row][3],
 201:main.c        ****   //                 raw_therm[row][4], raw_therm[row][5],
 202:main.c        ****   //                 raw_therm[row][6], raw_therm[row][7]);
 203:main.c        ****   //         uint8_t i;
 204:main.c        ****   //         uint8_t checksum = 0;
 205:main.c        ****   //         for (i = 1; i < n - 1; i++) checksum ^= printbuf[i];
 206:main.c        ****   //         printf("%s%02X\r\n", printbuf, checksum);
 207:main.c        ****   //     }
 208:main.c        ****   //     nrk_wait_until_next_period();
 209:main.c        **** }
 210:main.c        **** 
 211:main.c        **** 
 212:main.c        **** 
 213:main.c        **** void
 214:main.c        **** nrk_create_taskset()
 215:main.c        **** {
 539               	.LM31:
 540               	.LFBB4:
 541               	/* prologue: function */
 542               	/* frame size = 0 */
 543               	/* stack size = 0 */
 544               	.L__stack_usage = 0
 216:main.c        ****   nrk_task_set_entry_function( &TaskOne, Task_Accelorometer);
 546               	.LM32:
 547 00ce 60E0      		ldi r22,lo8(gs(Task_Accelorometer))
 548 00d0 70E0      		ldi r23,hi8(gs(Task_Accelorometer))
 549 00d2 80E0      		ldi r24,lo8(TaskOne)
 550 00d4 90E0      		ldi r25,hi8(TaskOne)
 551 00d6 0E94 0000 		call nrk_task_set_entry_function
 217:main.c        ****   nrk_task_set_stk( &TaskOne, Stack1, NRK_APP_STACKSIZE);
 553               	.LM33:
 554 00da 40E8      		ldi r20,lo8(-128)
 555 00dc 50E0      		ldi r21,0
 556 00de 60E0      		ldi r22,lo8(Stack1)
 557 00e0 70E0      		ldi r23,hi8(Stack1)
 558 00e2 80E0      		ldi r24,lo8(TaskOne)
 559 00e4 90E0      		ldi r25,hi8(TaskOne)
 560 00e6 0E94 0000 		call nrk_task_set_stk
 218:main.c        ****   TaskOne.prio = 1;
 562               	.LM34:
 563 00ea E0E0      		ldi r30,lo8(TaskOne)
 564 00ec F0E0      		ldi r31,hi8(TaskOne)
 565 00ee 81E0      		ldi r24,lo8(1)
 566 00f0 8087      		std Z+8,r24
 219:main.c        ****   TaskOne.FirstActivation = TRUE;
 568               	.LM35:
 569 00f2 8783      		std Z+7,r24
 220:main.c        ****   TaskOne.Type = BASIC_TASK;
 571               	.LM36:
 572 00f4 8187      		std Z+9,r24
 221:main.c        ****   TaskOne.SchType = PREEMPTIVE;
 574               	.LM37:
 575 00f6 8287      		std Z+10,r24
 222:main.c        ****   TaskOne.period.secs = 0;
 577               	.LM38:
 578 00f8 1386      		std Z+11,__zero_reg__
 579 00fa 1486      		std Z+12,__zero_reg__
 580 00fc 1586      		std Z+13,__zero_reg__
 581 00fe 1686      		std Z+14,__zero_reg__
 223:main.c        ****   TaskOne.period.nano_secs = 250*NANOS_PER_MS;
 583               	.LM39:
 584 0100 80E8      		ldi r24,lo8(-128)
 585 0102 92EB      		ldi r25,lo8(-78)
 586 0104 A6EE      		ldi r26,lo8(-26)
 587 0106 BEE0      		ldi r27,lo8(14)
 588 0108 8787      		std Z+15,r24
 589 010a 908B      		std Z+16,r25
 590 010c A18B      		std Z+17,r26
 591 010e B28B      		std Z+18,r27
 224:main.c        ****   TaskOne.cpu_reserve.secs = 0;
 593               	.LM40:
 594 0110 138A      		std Z+19,__zero_reg__
 595 0112 148A      		std Z+20,__zero_reg__
 596 0114 158A      		std Z+21,__zero_reg__
 597 0116 168A      		std Z+22,__zero_reg__
 225:main.c        ****   TaskOne.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
 599               	.LM41:
 600 0118 80E0      		ldi r24,0
 601 011a 91EE      		ldi r25,lo8(-31)
 602 011c A5EF      		ldi r26,lo8(-11)
 603 011e B5E0      		ldi r27,lo8(5)
 604 0120 878B      		std Z+23,r24
 605 0122 908F      		std Z+24,r25
 606 0124 A18F      		std Z+25,r26
 607 0126 B28F      		std Z+26,r27
 226:main.c        ****   TaskOne.offset.secs = 1;
 609               	.LM42:
 610 0128 81E0      		ldi r24,lo8(1)
 611 012a 90E0      		ldi r25,0
 612 012c A0E0      		ldi r26,0
 613 012e B0E0      		ldi r27,0
 614 0130 838F      		std Z+27,r24
 615 0132 948F      		std Z+28,r25
 616 0134 A58F      		std Z+29,r26
 617 0136 B68F      		std Z+30,r27
 227:main.c        ****   TaskOne.offset.nano_secs= 0;
 619               	.LM43:
 620 0138 178E      		std Z+31,__zero_reg__
 621 013a 10A2      		std Z+32,__zero_reg__
 622 013c 11A2      		std Z+33,__zero_reg__
 623 013e 12A2      		std Z+34,__zero_reg__
 228:main.c        ****   nrk_activate_task (&TaskOne);
 625               	.LM44:
 626 0140 CF01      		movw r24,r30
 627 0142 0C94 0000 		jmp nrk_activate_task
 629               	.Lscope4:
 631               		.stabd	78,0,0
 632               		.section	.text.startup,"ax",@progbits
 634               	.global	main
 636               	main:
 637               		.stabd	46,0,0
  90:main.c        ****   nrk_setup_ports();
 639               	.LM45:
 640               	.LFBB5:
 641               	/* prologue: function */
 642               	/* frame size = 0 */
 643               	/* stack size = 0 */
 644               	.L__stack_usage = 0
  91:main.c        ****   nrk_setup_uart(UART_BAUDRATE_115K2);
 646               	.LM46:
 647 0000 0E94 0000 		call nrk_setup_ports
  92:main.c        **** 
 649               	.LM47:
 650 0004 80E1      		ldi r24,lo8(16)
 651 0006 90E0      		ldi r25,0
 652 0008 0E94 0000 		call nrk_setup_uart
  94:main.c        ****   sei();
 654               	.LM48:
 655 000c 0E94 0000 		call TWI_Master_Initialise
  95:main.c        ****   init_adxl345();
 657               	.LM49:
 658               	/* #APP */
 659               	 ;  95 "main.c" 1
 660 0010 7894      		sei
 661               	 ;  0 "" 2
  96:main.c        ****   nrk_init();
 663               	.LM50:
 664               	/* #NOAPP */
 665 0012 0E94 0000 		call init_adxl345
  97:main.c        **** 
 667               	.LM51:
 668 0016 0E94 0000 		call nrk_init
  99:main.c        ****   nrk_led_clr(BLUE_LED);
 670               	.LM52:
 671 001a 82E0      		ldi r24,lo8(2)
 672 001c 90E0      		ldi r25,0
 673 001e 0E94 0000 		call nrk_led_clr
 100:main.c        ****   nrk_led_clr(GREEN_LED);
 675               	.LM53:
 676 0022 83E0      		ldi r24,lo8(3)
 677 0024 90E0      		ldi r25,0
 678 0026 0E94 0000 		call nrk_led_clr
 101:main.c        ****   nrk_led_clr(RED_LED);
 680               	.LM54:
 681 002a 81E0      		ldi r24,lo8(1)
 682 002c 90E0      		ldi r25,0
 683 002e 0E94 0000 		call nrk_led_clr
 102:main.c        ****  
 685               	.LM55:
 686 0032 80E0      		ldi r24,0
 687 0034 90E0      		ldi r25,0
 688 0036 0E94 0000 		call nrk_led_clr
 104:main.c        ****   nrk_create_taskset ();
 690               	.LM56:
 691 003a 20E0      		ldi r18,0
 692 003c 30E0      		ldi r19,0
 693 003e A901      		movw r20,r18
 694 0040 60E0      		ldi r22,0
 695 0042 70E0      		ldi r23,0
 696 0044 CB01      		movw r24,r22
 697 0046 0E94 0000 		call nrk_time_set
 105:main.c        ****   nrk_start();
 699               	.LM57:
 700 004a 0E94 0000 		call nrk_create_taskset
 106:main.c        ****   
 702               	.LM58:
 703 004e 0E94 0000 		call nrk_start
 109:main.c        **** 
 705               	.LM59:
 706 0052 80E0      		ldi r24,0
 707 0054 90E0      		ldi r25,0
 708 0056 0895      		ret
 710               	.Lscope5:
 712               		.stabd	78,0,0
 713               	.global	read
 714               		.section .bss
 717               	read:
 718 0000 0000      		.zero	2
 719               		.comm	messageBuf,16,1
 720               		.comm	TaskOne,35,1
 721               		.comm	Stack1,128,1
 722               		.comm	_nrk_stats_sleep_time,8,1
 723               		.comm	cur_task_stats,150,1
 724               		.comm	app_timer0_prescale,1,1
 725               		.comm	app_timer0_callback,2,1
 726               		.comm	_nrk_time_trigger,1,1
 727               		.comm	_nrk_prev_timer_val,1,1
 728               		.comm	error_num,1,1
 729               		.comm	error_task,1,1
 730               		.comm	nrk_kernel_stk_ptr,2,1
 731               		.comm	nrk_idle_task_stk,128,1
 732               		.comm	_nrk_signal_list,4,1
 748               		.text
 750               	.Letext0:
 751               		.ident	"GCC: (GNU) 4.9.1"
 752               	.global __do_copy_data
 753               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccwbxIqK.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccwbxIqK.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccwbxIqK.s:4      *ABS*:000000000000003f __SREG__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccwbxIqK.s:5      *ABS*:000000000000003b __RAMPZ__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccwbxIqK.s:6      *ABS*:0000000000000000 __tmp_reg__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccwbxIqK.s:7      *ABS*:0000000000000001 __zero_reg__
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccwbxIqK.s:331    .text:0000000000000000 Task_Accelorometer
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccwbxIqK.s:359    .text:0000000000000006 TWI_Act_On_Failure_In_Last_Transmission
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccwbxIqK.s:417    .text:0000000000000034 init_adxl345
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccwbxIqK.s:717    .bss:0000000000000000 read
                            *COM*:0000000000000010 messageBuf
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccwbxIqK.s:536    .text:00000000000000ce nrk_create_taskset
                            *COM*:0000000000000023 TaskOne
                            *COM*:0000000000000080 Stack1
/var/folders/5w/cgn1dq610yqf6q25zlv0gqm40000gn/T//ccwbxIqK.s:636    .text.startup:0000000000000000 main
                            *COM*:0000000000000008 _nrk_stats_sleep_time
                            *COM*:0000000000000096 cur_task_stats
                            *COM*:0000000000000001 app_timer0_prescale
                            *COM*:0000000000000002 app_timer0_callback
                            *COM*:0000000000000001 _nrk_time_trigger
                            *COM*:0000000000000001 _nrk_prev_timer_val
                            *COM*:0000000000000001 error_num
                            *COM*:0000000000000001 error_task
                            *COM*:0000000000000002 nrk_kernel_stk_ptr
                            *COM*:0000000000000080 nrk_idle_task_stk
                            *COM*:0000000000000004 _nrk_signal_list

UNDEFINED SYMBOLS
nrk_wait_until_next_period
TWI_Start_Transceiver
printf
TWI_Start_Transceiver_With_Data
TWI_Get_Data_From_Transceiver
puts
nrk_task_set_entry_function
nrk_task_set_stk
nrk_activate_task
nrk_setup_ports
nrk_setup_uart
TWI_Master_Initialise
nrk_init
nrk_led_clr
nrk_time_set
nrk_start
__do_copy_data
__do_clear_bss
